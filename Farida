// Method definition: This method adds a flight (either domestic or international) based on user input
private static void addFlightMenu(Scanner scanner, FlightManager flightManager) {
    
    // Prompt the user to enter a flight number and store it as a string
    System.out.print("Enter Flight Number: ");
    String flightNumber = scanner.nextLine();  // `scanner.nextLine()` reads the next full line of text input by the user

    // Prompt the user to enter the origin of the flight (where the flight is departing from)
    System.out.print("Enter Origin: ");
    String origin = scanner.nextLine();  // Reads the user input for the origin

    // Prompt the user to enter the destination of the flight (where the flight is going)
    System.out.print("Enter Destination: ");
    String destination = scanner.nextLine();  // Reads the user input for the destination

    // Prompt the user to enter the base cost of the flight
    System.out.print("Enter Base Cost: ");
    double baseCost;  // Declare a variable to store the base cost of the flight
    try {
        // Try to parse the user input to a double (floating point number) for the cost
        baseCost = Double.parseDouble(scanner.nextLine());  // `Double.parseDouble()` converts the input string to a double
    } catch (NumberFormatException e) {
        // If the user inputs an invalid value that cannot be converted to a double
        System.out.println("Invalid cost. Flight not added.");
        return;  // Exit the method without adding the flight
    }

    // Prompt the user to indicate whether the flight is international or domestic
    System.out.print("Is this an international flight? (yes/no): ");
    String international = scanner.nextLine().trim().toLowerCase();  // Normalize the user input by trimming spaces and converting to lowercase

    // If the flight is international, handle additional information specific to international flights
    if (international.equals("yes")) {
        
        // Ask the user if a visa is required for this international flight
        System.out.print("Is a visa required? (yes/no): ");
        boolean visaRequired = scanner.nextLine().trim().equalsIgnoreCase("yes");  // Convert the user's response to a boolean (true if "yes", false if "no")

        // Prompt the user to enter visa details if applicable
        System.out.print("Enter Visa Details: ");
        String visaDetails = scanner.nextLine();  // Read additional visa details input

        // Create a new instance of the `InternationalFlight` class and add it to the flight manager
        flightManager.addFlight(new InternationalFlight(flightNumber, origin, destination, baseCost, visaRequired, visaDetails));
    } else {
        // If the flight is domestic (not international), create a `DomesticFlight` object
        flightManager.addFlight(new DomesticFlight(flightNumber, origin, destination, baseCost));
    }
} 





// Method definition: This method searches for a flight by its flight number and displays its details if found
private static void searchFlightMenu(Scanner scanner, FlightManager flightManager) {
    
    // Prompt the user to enter the flight number they want to search for
    System.out.print("Enter Flight Number: ");
    String flightNumber = scanner.nextLine();  // `scanner.nextLine()` reads the user input (flight number) from the console

    // Use the flightManager to find the flight with the entered flight number
    Flight flight = flightManager.findFlightByNumber(flightNumber);  // Call `findFlightByNumber()` on flightManager to search for the flight

    // Check if a flight was found (flight is not null)
    if (flight != null) {
        // If the flight exists, display its details using the `displayDetails()` method
        flight.displayDetails();  // Call the `displayDetails()` method of the `Flight` object to show its details
    } else {
        // If no flight was found with the given flight number, inform the user
        System.out.println("Flight not found.");
    }
}





// Method definition: This method handles booking a seat for a passenger on a flight
private static void bookSeatMenu(Scanner scanner, FlightManager flightManager) {
    
    // Prompt the user to enter the flight number for booking a seat
    System.out.print("Enter Flight Number: ");
    String flightNumber = scanner.nextLine();  // Reads the flight number input by the user

    // Prompt the user to enter the passenger's name
    System.out.print("Enter Passenger Name: ");
    String passengerName = scanner.nextLine();  // Reads the passenger's name input by the user

    // Prompt the user to enter the passenger's ID
    System.out.print("Enter Passenger ID: ");
    String passengerID = scanner.nextLine();  // Reads the passenger's ID input by the user

    // Search for an existing passenger with the provided passenger ID
    Passenger passenger = flightManager.findPassengerByID(passengerID);  // Call the `findPassengerByID()` method on `flightManager` to search for a passenger

    // If no passenger exists with the provided ID, create a new passenger object
    if (passenger == null) {
        passenger = new Passenger(passengerName, passengerID, flightNumber);  // Create a new `Passenger` object with the entered name, ID, and flight number
        flightManager.addPassenger(passenger);  // Add the newly created passenger to the flight manager
    }

    // Call the `bookSeat()` method to book a seat for the passenger on the specified flight
    flightManager.bookSeat(flightNumber, passenger);  // The `bookSeat()` method books a seat for the passenger on the flight with the given flight number
}


public void cancelReservation(String passengerID) {
    // Find the passenger by ID
    Passenger passenger = findPassengerByID(passengerID);
    
    // If passenger is found, cancel the reservation
    if (passenger != null) {
        // Logic to cancel the reservation (e.g., remove the passenger's seat booking)
        System.out.println("Reservation canceled for passenger: " + passenger.getName());
    } else {
        System.out.println("Passenger with ID " + passengerID + " not found.");
    }
}




// Method definition: This method displays the booking history of a passenger based on their passenger ID
private static void viewBookingHistoryMenu(Scanner scanner, FlightManager flightManager) {
    
    // Prompt the user to enter the passenger ID whose booking history needs to be viewed
    System.out.print("Enter Passenger ID: ");
    String passengerID = scanner.nextLine();  // Reads the passenger ID entered by the user

    // Use the FlightManager to find the passenger by their ID
    Passenger passenger = flightManager.findPassengerByID(passengerID);  // Call `findPassengerByID()` on `flightManager` to retrieve the passenger

    // Check if the passenger exists (i.e., is not null)
    if (passenger != null) {
        // If the passenger exists, call the `viewBookingHistory()` method to display their booking history
        passenger.viewBookingHistory();  // Show the booking history stored within the `Passenger` object
    } else {
        // If no passenger with the given ID is found, inform the user
        System.out.println("Passenger not found.");
    }
}




// Method definition: This method generates reports about flights and route popularity
private static void generateReports(FlightManager flightManager) {
    
    // Print a heading for the daily report section
    System.out.println("--- Daily Report ---");
    
    // Call the `viewFlights` method of the `FlightManager` class to display all flights
    flightManager.viewFlights();  // Presumably lists all the flights scheduled for the day

    // Print a heading for the popular routes section
    System.out.println("--- Popular Routes ---");

    // Call `calculatePopularRoutes()` to get a map of route popularity
    Map<String, Integer> routePopularity = flightManager.calculatePopularRoutes();  // The method returns a map where the key is a route, and the value is the number of bookings

    // Iterate over the map to display each route and its popularity
    for (Map.Entry<String, Integer> entry : routePopularity.entrySet()) {
        // Print the route (key) and the number of bookings (value)
        System.out.println(entry.getKey() + ": " + entry.getValue() + " bookings");
    }
}






// Method definition: This method displays detailed information about a specific flight based on its flight number
private static void viewFlightDetailsMenu(Scanner scanner, FlightManager flightManager) {
    
    // Prompt the user to enter the flight number they want to view details for
    System.out.print("Enter Flight Number: ");
    String flightNumber = scanner.nextLine();  // Reads the flight number entered by the user

    // Use the FlightManager to find a Flight object corresponding to the entered flight number
    Flight flight = flightManager.findFlightByNumber(flightNumber);  // Calls `findFlightByNumber()` to search for the flight

    // Check if the flight exists (i.e., the flight is not null)
    if (flight != null) {
        // If the flight is found, call its `displayDetails()` method to show detailed information
        flight.displayDetails();  // Outputs the details of the flight
    } else {
        // If no flight with the given number is found, inform the user
        System.out.println("Flight not found.");
    }
}




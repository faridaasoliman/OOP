import java.util.ArrayList;
import java.util.List; 
import java.io.*;

// Main AirlineSystem class
public class AirlineSystem {
    private String flightNumber;
    private String departure;
    private String destination;
    private String arrivalTime;
    private String departureTime;
    private int availableSeats;
    private double ticketPrice;
    private String flightType; // economy, business, first class

    // Constructor
    public AirlineSystem(String flightNumber, String departure, String destination,
                         String arrivalTime, String departureTime, int availableSeats,
                         double ticketPrice, String flightType) {
        this.flightNumber = flightNumber;
        this.departure = departure;
        this.destination = destination;
        this.arrivalTime = arrivalTime;
        this.departureTime = departureTime;
        this.availableSeats = availableSeats;
        this.ticketPrice = ticketPrice;
        this.flightType = flightType;
    }

    // Getters and setters
    public String getFlightNumber() {
        return flightNumber;
    }

    public void setFlightNumber(String flightNumber) {
        this.flightNumber = flightNumber;
    }

    public String getDeparture() {
        return departure;
    }

    public void setDeparture(String departure) {
        this.departure = departure;
    }

    public String getDestination() {
        return destination;
    }

    public void setDestination(String destination) {
        this.destination = destination;
    }

    public String getArrivalTime() {
        return arrivalTime;
    }

    public void setArrivalTime(String arrivalTime) {
        this.arrivalTime = arrivalTime;
    }

    public String getDepartureTime() {
        return departureTime;
    }

    public void setDepartureTime(String departureTime) {
        this.departureTime = departureTime;
    }

    public int getAvailableSeats() {
        return availableSeats;
    }

    public void setAvailableSeats(int availableSeats) {
        this.availableSeats = availableSeats;
    }

    public double getTicketPrice() {
        return ticketPrice;
    }

    public void setTicketPrice(double ticketPrice) {
        this.ticketPrice = ticketPrice;
    }

    public String getFlightType() {
        return flightType;
    }

    public void setFlightType(String flightType) {
        this.flightType = flightType;
    }

    // Calculate ticket price based on passenger type and frequent flyer status
    public double calculateTicketPrice(String passengerType, boolean isFrequentFlyer) {
        double price = ticketPrice;
        if ("child".equalsIgnoreCase(passengerType)) {
            price *= 0.5; // 50% discount for children
        } else if ("senior".equalsIgnoreCase(passengerType)) {
            price *= 0.7; // 30% discount for seniors
        }

        if (isFrequentFlyer) {
            price *= 0.9; // 10% discount for frequent flyers
        }

        return price;
    }
}

// Passenger class
class Passenger {
    private String passengerName;
    private String passengerID;
    private List<String> bookingHistory;
    private int frequentFlyerPoints;

    public Passenger(String passengerName, String passengerID) {
        this.passengerName = passengerName;
        this.passengerID = passengerID;
        this.bookingHistory = new ArrayList<>();
        this.frequentFlyerPoints = 0;
    }

    public String getPassengerName() {
        return passengerName;
    }

    public void setPassengerName(String passengerName) {
        this.passengerName = passengerName;
    }

    public String getPassengerID() {
        return passengerID;
    }

    public void setPassengerID(String passengerID) {
        this.passengerID = passengerID;
    }

    public int getFrequentFlyerPoints() {
        return frequentFlyerPoints;
    }

    public void updateFrequentFlyerPoints(int miles) {
        this.frequentFlyerPoints += miles;
    }

    public List<String> getBookingHistory() {
        return bookingHistory;
    }

    public void addBooking(String flightNumber) {
        bookingHistory.add(flightNumber);
    }

    public void viewBookingHistory() {
        for (String flight : bookingHistory) {
            System.out.println(flight);
        }
    }
}

// Base Flight class
class Flight {
    private String flightNumber;
    private String origin;
    private String destination;
    private double baseCost;

    public Flight(String flightNumber, String origin, String destination, double baseCost) {
        this.flightNumber = flightNumber;
        this.origin = origin;
        this.destination = destination;
        this.baseCost = baseCost;
    }

    public String getFlightNumber() {
        return flightNumber;
    }

    public String getOrigin() {
        return origin;
    }

    public String getDestination() {
        return destination;
    }

    public double getBaseCost() {
        return baseCost;
    }

    public void displayDetails() {
        System.out.println("Flight Number: " + flightNumber);
        System.out.println("Origin: " + origin);
        System.out.println("Destination: " + destination);
        System.out.println("Base Cost: $" + baseCost);
    }
}

// DomesticFlight class inheriting from Flight
class DomesticFlight extends Flight {
    private boolean visaRequired;

    public DomesticFlight(String flightNumber, String origin, String destination, double baseCost) {
        super(flightNumber, origin, destination, baseCost);
        this.visaRequired = false; // Visa is generally not required for domestic flights.
    }

    public boolean isVisaRequired() {
        return visaRequired;
    }

    @Override
    public void displayDetails() {
        super.displayDetails();
        System.out.println("Visa Required: " + (visaRequired ? "Yes" : "No"));
        System.out.println("Cost (Domestic Discount): $" + (getBaseCost() * 0.9)); // 10% discount
    }
}

// InternationalFlight class inheriting from Flight
class InternationalFlight extends Flight {
    private boolean visaRequired;
    private String visaDetails;

    public InternationalFlight(String flightNumber, String origin, String destination, double baseCost, boolean visaRequired, String visaDetails) {
        super(flightNumber, origin, destination, baseCost);
        this.visaRequired = visaRequired;
        this.visaDetails = visaDetails;
    }

    public boolean isVisaRequired() {
        return visaRequired;
    }

    public String getVisaDetails() {
        return visaDetails;
    }

    @Override
    public void displayDetails() {
        super.displayDetails();
        System.out.println("Visa Required: " + (visaRequired ? "Yes" : "No"));
        if (visaRequired) {
            System.out.println("Visa Details: " + visaDetails);
        }
        System.out.println("Cost (International): $" + (getBaseCost() * 1.2)); // 20% additional cost
    }
}

// FlightManager class
class FlightManager {
    private List<Flight> flights;
    private List<Passenger> passengers;

    public FlightManager() {
        flights = new ArrayList<>();
        passengers = new ArrayList<>();
    }

    public void addFlight(Flight flight) {
        flights.add(flight);
        System.out.println("Flight added: " + flight.getFlightNumber());
    }

    public void viewFlights() {
        for (Flight flight : flights) {
            flight.displayDetails();
        }
    }

    public void bookSeat(String flightNumber, Passenger passenger) {
        for (Flight flight : flights) {
            if (flight.getFlightNumber().equals(flightNumber)) {
                passenger.addBooking(flightNumber);
                System.out.println("Seat booked for " + passenger.getPassengerName() + " on flight " + flightNumber);
                return;
            }
        }
        System.out.println("Flight " + flightNumber + " not found.");
    }

    public void cancelReservation(String passengerID) {
        for (Passenger passenger : passengers) {
            if (passenger.getPassengerID().equals(passengerID)) {
                passenger.getBookingHistory().clear();
                System.out.println("Reservation canceled for " + passenger.getPassengerName());
                return;
            }
        }
        System.out.println("Passenger not found.");
    }

    public void addPassenger(Passenger passenger) {
        passengers.add(passenger);
        System.out.println("Passenger added: " + passenger.getPassengerName());
    }
} 



// Main class to run the airline system
public class AirlineSystemApp {
    public static void main(String[] args) {
        FlightManager flightManager = new FlightManager();
        flightManager.loadData(); // Load data from file

        Scanner scanner = new Scanner(System.in);
        boolean exit = false;

        while (!exit) {
            System.out.println("\n--- Airline System Menu ---");
            System.out.println("1. Add Flight");
            System.out.println("2. View Flights");
            System.out.println("3. Search Flights");
            System.out.println("4. Book Seat");
            System.out.println("5. Cancel Reservation");
            System.out.println("6. View Passenger Booking History");
            System.out.println("7. Generate Reports");
            System.out.println("8. Exit");
            System.out.print("Enter your choice: ");

            int choice;
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid choice. Please enter a number.");
                continue;
            }

            switch (choice) {
                case 1 -> addFlightMenu(scanner, flightManager);
                case 2 -> flightManager.viewFlights();
                case 3 -> searchFlightMenu(scanner, flightManager);
                case 4 -> bookSeatMenu(scanner, flightManager);
                case 5 -> cancelReservationMenu(scanner, flightManager);
                case 6 -> viewBookingHistoryMenu(scanner, flightManager);
                case 7 -> generateReports(flightManager);
                case 8 -> {
                    flightManager.saveData();
                    exit = true;
                }
                default -> System.out.println("Invalid choice. Try again.");
            }
        }
    }

    // Add Flight Menu
    private static void addFlightMenu(Scanner scanner, FlightManager flightManager) {
        System.out.print("Enter Flight Number: ");
        String flightNumber = scanner.nextLine();

        System.out.print("Enter Origin: ");
        String origin = scanner.nextLine();

        System.out.print("Enter Destination: ");
        String destination = scanner.nextLine();

        System.out.print("Enter Base Cost: ");
        double baseCost;
        try {
            baseCost = Double.parseDouble(scanner.nextLine());
        } catch (NumberFormatException e) {
            System.out.println("Invalid cost. Flight not added.");
            return;
        }

        System.out.print("Is this an international flight? (yes/no): ");
        String international = scanner.nextLine().trim().toLowerCase();

        if (international.equals("yes")) {
            System.out.print("Is a visa required? (yes/no): ");
            boolean visaRequired = scanner.nextLine().trim().equalsIgnoreCase("yes");

            System.out.print("Enter Visa Details: ");
            String visaDetails = scanner.nextLine();

            flightManager.addFlight(new InternationalFlight(flightNumber, origin, destination, baseCost, visaRequired, visaDetails));
        } else {
            flightManager.addFlight(new DomesticFlight(flightNumber, origin, destination, baseCost));
        }
    }

    // Search Flight Menu
    private static void searchFlightMenu(Scanner scanner, FlightManager flightManager) {
        System.out.print("Enter Flight Number: ");
        String flightNumber = scanner.nextLine();
        Flight flight = flightManager.findFlightByNumber(flightNumber);
        if (flight != null) {
            flight.displayDetails();
        } else {
            System.out.println("Flight not found.");
        }
    }

    // Book Seat Menu
    private static void bookSeatMenu(Scanner scanner, FlightManager flightManager) {
        System.out.print("Enter Flight Number: ");
        String flightNumber = scanner.nextLine();

        System.out.print("Enter Passenger Name: ");
        String passengerName = scanner.nextLine();

        System.out.print("Enter Passenger ID: ");
        String passengerID = scanner.nextLine();

        Passenger passenger = flightManager.findPassengerByID(passengerID);
        if (passenger == null) {
            passenger = new Passenger(passengerName, passengerID, flightNumber);
            flightManager.addPassenger(passenger);
        }

        flightManager.bookSeat(flightNumber, passenger);
    }

    // Cancel Reservation Menu
    private static void cancelReservationMenu(Scanner scanner, FlightManager flightManager) {
        System.out.print("Enter Passenger ID: ");
        String passengerID = scanner.nextLine();
        flightManager.cancelReservation(passengerID);
    }

    // View Booking History Menu
    private static void viewBookingHistoryMenu(Scanner scanner, FlightManager flightManager) {
        System.out.print("Enter Passenger ID: ");
        String passengerID = scanner.nextLine();
        Passenger passenger = flightManager.findPassengerByID(passengerID);
        if (passenger != null) {
            passenger.viewBookingHistory();
        } else {
            System.out.println("Passenger not found.");
        }
    }

    // Generate Reports
    private static void generateReports(FlightManager flightManager) {
        System.out.println("--- Daily Report ---");
        flightManager.viewFlights();

        System.out.println("--- Popular Routes ---");
        Map<String, Integer> routePopularity = flightManager.calculatePopularRoutes();
        for (Map.Entry<String, Integer> entry : routePopularity.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue() + " bookings");
        }
    }
}

// File Handling: Save and Load Data
class FileHandler {
    private static final String FLIGHT_FILE = "flights.txt";
    private static final String PASSENGER_FILE = "passengers.txt";

    public static void saveFlights(List<Flight> flights) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FLIGHT_FILE))) {
            oos.writeObject(flights);
        } catch (IOException e) {
            System.out.println("Error saving flights: " + e.getMessage());
        }
    }

    public static List<Flight> loadFlights() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FLIGHT_FILE))) {
            return (List<Flight>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            return new ArrayList<>();
        }
    }

    public static void savePassengers(List<Passenger> passengers) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(PASSENGER_FILE))) {
            oos.writeObject(passengers);
        } catch (IOException e) {
            System.out.println("Error saving passengers: " + e.getMessage());
        }
    }

    public static List<Passenger> loadPassengers() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(PASSENGER_FILE))) {
            return (List<Passenger>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            return new ArrayList<>();
        }
    }
}



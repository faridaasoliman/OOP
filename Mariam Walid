public class airlinesystem {
    private string flightNumber;
    private string departure ;
    private string destination;
    private string arrivalTime;
    private string departureTime;
    private int availableSeats;
    private double ticketprice;
    private string flighttype; // el homa 3 types economy ,business,ffisrt class
}
public flight (string flightNumber,string departure ,string destination,string arrivalTime,
               string departureTime,int availableSeats,double ticketprice,string flighttype){
    this.flightNumer=flightNumber;
    this.departure=departure;
    this.destination=destination;
    this.arrivalTime=arrivalTime;
    this.departureTime=departureTime;
    this.availableSeats=availableSeats;
    this.ticketprice=ticketprice;
    this.flighttype=flighttype;
}
public string get flightNumer(){
   return flightnumber;
}

public void setflightNumber(string flightNumber) {
    this.flightNumber= flightNumber();
}
public String getDeparture() {
    return departure;
}

public void setDeparture(String departure) {
    this.departure = departure;
}

public String getDestination() {
    return destination;
}

public void setDestination(String destination) {
    this.destination = destination;
}

public String getDepartureTime() {
    return departureTime;
}

public void setDepartureTime(String departureTime) {
    this.departureTime = departureTime;
}

public String getArrivalTime() {
    return arrivalTime;
}

public void setArrivalTime(String arrivalTime) {
    this.arrivalTime = arrivalTime;
}

public int getAvailableSeats() {
    return availableSeats;
}

public void setAvailableSeats(int availableSeats) {
    this.availableSeats = availableSeats;
}

public double getTicketPrice() {
    return ticketPrice;
}

public void setTicketPrice(double ticketPrice) {
    this.ticketPrice = ticketPrice;
}

public String getFlightType() {
    return flightType;
}

public void setFlightType(String flightType) {
    this.flightType = flightType;
}

public double calculateTicketPrice(String passengerType, boolean isFrequentFlyer) {
    double price = ticketPrice;
    if (passengerType.equalsIgnoreCase("child")) {
        price *= 0.5; // 50% discount ll atfal
    } else if (passengerType.equalsIgnoreCase("senior")) {
        price *= 0.7; // 30% discount ll seniors
    }

    if (isFrequentFlyer) {
        price *= 0.9; // 10% discount ll frequent flyers
    }

    return price;
}
}
  import java.util.ArrayList;
import java.util.List;

public class Passenger {
    private String passengerName;
    private String passengerID;
    private String flightNumber;
    private int frequentFlyerPoints;
    private List<String> bookingHistory;
    
    public Passenger(String passengerName, String passengerID, String flightNumber) {
        this.passengerName = passengerName;
        this.passengerID = passengerID;
        this.flightNumber = flightNumber;
        this.frequentFlyerPoints = 0;
        this.bookingHistory = new ArrayList<>();
    }

    
    public String getPassengerName() {
        return passengerName;
    }

    public void setPassengerName(String passengerName) {
        this.passengerName = passengerName;
    }

    public String getPassengerID() {
        return passengerID;
    }

    public void setPassengerID(String passengerID) {
        this.passengerID = passengerID;
    }

    public int getFrequentFlyerPoints() {
        return frequentFlyerPoints;
    }

    public void setFrequentFlyerPoints(int frequentFlyerPoints) {
        this.frequentFlyerPoints = frequentFlyerPoints;
    }

    public List<String> getBookingHistory() {
        return bookingHistory;
    }

    public void setBookingHistory(List<String> bookingHistory) {
        this.bookingHistory = bookingHistory;
    }

    
    public void addBooking(String flight) {
        bookingHistory.add(flight);
    }

    
    public void updateFrequentFlyerPoints(int miles) {
        frequentFlyerPoints += miles;
    }

    
    public void viewBookingHistory() {
        for (String flight : bookingHistory) {
            System.out.println(flight);
        }
    }
}
 public class Flight {
    private String flightNumber;
    private String origin;
    private String destination;
    private double baseCost;

    public Flight(String flightNumber, String origin, String destination, double baseCost) {
        this.flightNumber = flightNumber;
        this.origin = origin;
        this.destination = destination;
        this.baseCost = baseCost;
    }

    public String getFlightNumber() {
        return flightNumber;
    }

    public String getOrigin() {
        return origin;
    }

    public String getDestination() {
        return destination;
    }

    public double getBaseCost() {
        return baseCost;
    }

    public void displayDetails() {
        System.out.println("Flight Number: " + flightNumber);
       â€¦
 public class DomesticFlight extends Flight {
    private boolean visaRequired;

    public DomesticFlight(String flightNumber, String origin, String destination, double baseCost) {
        super(flightNumber, origin, destination, baseCost);
        this.visaRequired = false; // Visa is generally not required for domestic flights.
    }

    public boolean isVisaRequired() {
        return visaRequired;
    }

    @Override
    public void displayDetails() {
        super.displayDetails();
        System.out.println("Visa Required: " + (visaRequired ? "Yes" : "No"));
        System.out.println("Cost (Domestic Discount): $" + (getBaseCost() * 0.9)); // 10% discount for domestic flights.
    }
}
 public class InternationalFlight extends Flight {
    private boolean visaRequired;
    private String visaDetails;

    public InternationalFlight(String flightNumber, String origin, String destination, double baseCost, boolean visaRequired, String visaDetails) {
        super(flightNumber, origin, destination, baseCost);
        this.visaRequired = visaRequired;
        this.visaDetails = visaDetails;
    }

    public boolean isVisaRequired() {
        return visaRequired;
    }

    public String getVisaDetails() {
        return visaDetails;
    }

    @Override
    public void displayDetails() {
        super.displayDetails();
        System.out.println("Visa Required: " + (visaRequired ? "Yes" : "No"));
        if (visaRequired) {
            System.out.println("Visa Details: " + visaDetails);
        }
        System.out.println("Cost (International): $" + (getBaseCost() * 1.2)); // 20% additional cost for international flights.
    }
}
